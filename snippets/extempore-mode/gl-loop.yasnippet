# -*- mode: snippet -*-
# name: gl-loop
# key: glloop
# --
(sys:load "libs/external/shaders.xtm")

(define width ${1:1024.0})
(define height ${2:768.0})
(bind-val width float $1)
(bind-val height float $2)
(define fullscreen ${3:#f})

(define *gl-ctx* (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))
(xtm_render_setup (real->integer width) (real->integer height))
;; set up canvas as an OpenVG canvas
(let ((vg-ctx-res (xtm_create_vg_context (real->integer width) (real->integer height))))
  (if (<> vg-ctx-res 1) (xtm_vg_print_error)))

rendercb$0

(bind-func gl_render
  (lambda ()
    ;;          pre opaque transparent post data
    (xtm_render ${4:null} ${5:null} ${6:null} ${7:null} ${8:null})
    void))

(define gl-loop
  (lambda (time delta-t$9)
    (gl_render)
    (gl:swap-buffers *gl-ctx*)
    (callback (+ time (* *second* delta-t) 0.9)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t$9)))

(gl-loop (now) ${10:1/30})